// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"sf_test/internal/models"
	"sf_test/internal/core"
	"sync"
)

// Ensure, that SequenceServiceMock does implement SequenceService.
// If this is not the case, regenerate this file with moq.
var _ core.SequenceService = &SequenceServiceMock{}

// SequenceServiceMock is a mock implementation of SequenceService.
//
//	func TestSomethingThatUsesSequenceService(t *testing.T) {
//
//		// make and configure a mocked SequenceService
//		mockedSequenceService := &SequenceServiceMock{
//			CreateSequenceFunc: func(ctx context.Context, sequence *models.Sequence) (int64, error) {
//				panic("mock out the CreateSequence method")
//			},
//			GetSequenceFunc: func(ctx context.Context, id int64) (*models.Sequence, error) {
//				panic("mock out the GetSequence method")
//			},
//			UpdateTrackingFunc: func(ctx context.Context, id int64, openTracking bool, clickTracking bool) error {
//				panic("mock out the UpdateTracking method")
//			},
//		}
//
//		// use mockedSequenceService in code that requires SequenceService
//		// and then make assertions.
//
//	}
type SequenceServiceMock struct {
	// CreateSequenceFunc mocks the CreateSequence method.
	CreateSequenceFunc func(ctx context.Context, sequence *models.Sequence) (int64, error)

	// GetSequenceFunc mocks the GetSequence method.
	GetSequenceFunc func(ctx context.Context, id int64) (*models.Sequence, error)

	// UpdateTrackingFunc mocks the UpdateTracking method.
	UpdateTrackingFunc func(ctx context.Context, id int64, openTracking bool, clickTracking bool) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateSequence holds details about calls to the CreateSequence method.
		CreateSequence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sequence is the sequence argument value.
			Sequence *models.Sequence
		}
		// GetSequence holds details about calls to the GetSequence method.
		GetSequence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// UpdateTracking holds details about calls to the UpdateTracking method.
		UpdateTracking []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// OpenTracking is the openTracking argument value.
			OpenTracking bool
			// ClickTracking is the clickTracking argument value.
			ClickTracking bool
		}
	}
	lockCreateSequence sync.RWMutex
	lockGetSequence    sync.RWMutex
	lockUpdateTracking sync.RWMutex
}

// CreateSequence calls CreateSequenceFunc.
func (mock *SequenceServiceMock) CreateSequence(ctx context.Context, sequence *models.Sequence) (int64, error) {
	if mock.CreateSequenceFunc == nil {
		panic("SequenceServiceMock.CreateSequenceFunc: method is nil but SequenceService.CreateSequence was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sequence *models.Sequence
	}{
		Ctx:      ctx,
		Sequence: sequence,
	}
	mock.lockCreateSequence.Lock()
	mock.calls.CreateSequence = append(mock.calls.CreateSequence, callInfo)
	mock.lockCreateSequence.Unlock()
	return mock.CreateSequenceFunc(ctx, sequence)
}

// CreateSequenceCalls gets all the calls that were made to CreateSequence.
// Check the length with:
//
//	len(mockedSequenceService.CreateSequenceCalls())
func (mock *SequenceServiceMock) CreateSequenceCalls() []struct {
	Ctx      context.Context
	Sequence *models.Sequence
} {
	var calls []struct {
		Ctx      context.Context
		Sequence *models.Sequence
	}
	mock.lockCreateSequence.RLock()
	calls = mock.calls.CreateSequence
	mock.lockCreateSequence.RUnlock()
	return calls
}

// GetSequence calls GetSequenceFunc.
func (mock *SequenceServiceMock) GetSequence(ctx context.Context, id int64) (*models.Sequence, error) {
	if mock.GetSequenceFunc == nil {
		panic("SequenceServiceMock.GetSequenceFunc: method is nil but SequenceService.GetSequence was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetSequence.Lock()
	mock.calls.GetSequence = append(mock.calls.GetSequence, callInfo)
	mock.lockGetSequence.Unlock()
	return mock.GetSequenceFunc(ctx, id)
}

// GetSequenceCalls gets all the calls that were made to GetSequence.
// Check the length with:
//
//	len(mockedSequenceService.GetSequenceCalls())
func (mock *SequenceServiceMock) GetSequenceCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetSequence.RLock()
	calls = mock.calls.GetSequence
	mock.lockGetSequence.RUnlock()
	return calls
}

// UpdateTracking calls UpdateTrackingFunc.
func (mock *SequenceServiceMock) UpdateTracking(ctx context.Context, id int64, openTracking bool, clickTracking bool) error {
	if mock.UpdateTrackingFunc == nil {
		panic("SequenceServiceMock.UpdateTrackingFunc: method is nil but SequenceService.UpdateTracking was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ID            int64
		OpenTracking  bool
		ClickTracking bool
	}{
		Ctx:           ctx,
		ID:            id,
		OpenTracking:  openTracking,
		ClickTracking: clickTracking,
	}
	mock.lockUpdateTracking.Lock()
	mock.calls.UpdateTracking = append(mock.calls.UpdateTracking, callInfo)
	mock.lockUpdateTracking.Unlock()
	return mock.UpdateTrackingFunc(ctx, id, openTracking, clickTracking)
}

// UpdateTrackingCalls gets all the calls that were made to UpdateTracking.
// Check the length with:
//
//	len(mockedSequenceService.UpdateTrackingCalls())
func (mock *SequenceServiceMock) UpdateTrackingCalls() []struct {
	Ctx           context.Context
	ID            int64
	OpenTracking  bool
	ClickTracking bool
} {
	var calls []struct {
		Ctx           context.Context
		ID            int64
		OpenTracking  bool
		ClickTracking bool
	}
	mock.lockUpdateTracking.RLock()
	calls = mock.calls.UpdateTracking
	mock.lockUpdateTracking.RUnlock()
	return calls
}
